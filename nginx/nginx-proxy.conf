# Side car Proxy to handle the ssl client certificate
# Iptable rules should be used to redirect traffic to this proxy
# This will use the request host or the X-Backend-URL header to determine the upstream url

load_module modules/ngx_http_js_module.so;

error_log /dev/stdout debug;
events {
    worker_connections  1024;
}
worker_processes  1;

http {
    log_format custom '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$ssl_client_s_dn"';

    access_log /var/log/nginx/access.log custom;

    # Define a DNS resolver. Required for dynamic upstream url
    resolver 172.16.1.1 valid=300s;
    resolver_timeout 5s;


    # Custom code scripts
    js_path "/etc/nginx/njs/";
    js_import proxy from proxy.js;

    # Define the upstream url to be proxied the request
    js_set $upstream_url proxy.getUpstreamUrl;

    # Increase buffer size for subrequests
    subrequest_output_buffer_size 256k;

    # A proxy to serviceA where it provides a ssl client certificate required for the communication with serviceA
    server {
        listen 81 default_server;
        listen [::]:81 default_server;
        server_name proxy.local;
        location / {
             proxy_buffering off;

            # Since the upstream url is dynamic, we need to set dns resolver
            proxy_pass $upstream_url;

            proxy_ssl_certificate      /etc/nginx/certs/service.crt;
            proxy_ssl_certificate_key  /etc/nginx/certs/service.key;
        }
    }
}
