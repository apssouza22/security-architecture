# Authorization Gateway responsible for handling the authorisation using Keycloak

load_module modules/ngx_http_js_module.so;

error_log /dev/stdout debug;
events {
    worker_connections  1024;
}
worker_processes  1;

http {
    log_format custom '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$ssl_client_s_dn"';

    access_log /var/log/nginx/access.log custom;

    # Define a DNS resolver
    resolver 172.16.1.1 valid=300s;
    resolver_timeout 5s;


    # Custom code scripts
    js_path "/etc/nginx/njs/";
    js_import authn from authn.js;
    js_import token from token.js;
    js_import proxy from proxy.js;

    # Define the upstream url to be proxied the request
    js_set $upstream_url proxy.getUpstreamUrl;

    # Increase buffer size for subrequests
    subrequest_output_buffer_size 256k;


    server {
        listen 80 default_server;
        listen [::]:80 default_server;
        server_name gateway.local;

        location /login {
            return 302 http://127.0.0.1:9000/realms/tenantA/protocol/openid-connect/auth?scope=openid&response_type=code&client_id=appTest-login-client&redirect_uri=http://localhost:8002/auth_redirect&client_secret=vCjAY0XKadXE3n4xFUb7MGDvVJ1iVVPY&application-type=web_app;
        }

        # endpoint to exchange the Keycloak code for the token
        location /auth_redirect {
            js_content authn.exchangeCodeForToken;
        }

        # A proxy to Keycloak to get the token
        location = /_keycloak_token {
            internal;
            proxy_pass http://keycloak.local:9000/realms/tenantA/protocol/openid-connect/token;
            proxy_set_header Content-Type application/x-www-form-urlencoded;
            proxy_pass_request_body on;
        }

        location /validate-token {
            js_content token.validateJwtToken;
        }

        # A proxy to Keycloak to get the public key to validate the JWT token
        location = /_keycloak_certs {
            internal;
            proxy_pass http://keycloak.local:9000/realms/tenantA/protocol/openid-connect/certs;
        }
    }

    # A proxy to serviceA where it provides a ssl client certificate required for the communication with serviceA
    server {
        listen 81 default_server;
        listen [::]:81 default_server;
        server_name authn.local;
        location / {
             proxy_buffering off;

            #proxy_pass https://$http_host$uri$is_args$args;

            # Since the upstream url is dynamic, we need to set dns resolver
            proxy_pass $upstream_url;

            proxy_ssl_certificate      /etc/nginx/certs/service.crt;
            proxy_ssl_certificate_key  /etc/nginx/certs/service.key;
        }
    }
}
