# Authorization Gateway responsible for handling the authorisation using Keycloak

load_module modules/ngx_http_js_module.so; # Load the NJS module

events {
    worker_connections  1024; # Set the maximum number of simultaneous connections
}

worker_processes  auto; # Automatically determine the number of worker processes
error_log /dev/stdout debug; # Log errors to stdout with debug level

http {
    # Define a custom log format
    log_format custom '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$ssl_client_s_dn"';

    access_log /var/log/nginx/access.log custom; # Use the custom log format for access logs
    include       /etc/nginx/mime.types; # Include MIME types
    subrequest_output_buffer_size 256k; # Increase buffer size for subrequests

    # Custom JS code scripts
    js_path "/etc/nginx/njs/"; # Set the path for JS scripts
    js_import authn from authn.js; # Import the authn module from authn.js
    js_import token from token.js; # Import the token module from token.js

    # Redirect all HTTP traffic to HTTPS
    server {
        listen 80 default_server;
        listen [::]:80 default_server;
        server_name authn.local;
        location / {
            return 301 https://$host$request_uri;
        }
    }

    server {
        listen 443 ssl;
        listen [::]:443 ssl;
        server_name authn.local; # Set the server name

        ssl_certificate /etc/nginx/certs/service.crt;
        ssl_certificate_key /etc/nginx/certs/service.key;

        location / {
            auth_request /_authz;

            proxy_set_header        Host $host;
            proxy_set_header        X-Real-IP $remote_addr;
            proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header        X-Forwarded-Proto $scheme;

            proxy_pass http://127.0.0.1:8003;
            proxy_read_timeout  60;
            client_max_body_size 512m;
        }

        location = /_authz {
            internal;
            js_content token.validateJwtToken;
        }

        # A proxy to Keycloak to get the public key to validate the JWT token
        location = /_keycloak_certs {
            internal;
            proxy_pass http://keycloak.local:9000/realms/tenantA/protocol/openid-connect/certs;
        }

        location /login {
            set $redirect_uri "http://localhost:8002/auth_redirect";
            set $client_id "appTest-login-client";
            set $client_secret "vCjAY0XKadXE3n4xFUb7MGDvVJ1iVVPY";
            set $scope "openid";
            set $response_type "code";
            set $application_type "web_app";
            return 302 http://127.0.0.1:9000/realms/tenantA/protocol/openid-connect/auth?scope=$scope&response_type=$response_type&client_id=$client_id&redirect_uri=$redirect_uri&client_secret=$client_secret&application-type=$application_type;
        }

        # endpoint to exchange the Keycloak code for the token
        location /auth_redirect {
            js_content authn.exchangeCodeForToken;
        }

        # A proxy to Keycloak to get the token
        location = /token {
            proxy_pass http://keycloak.local:9000/realms/tenantA/protocol/openid-connect/token;
            proxy_set_header Content-Type application/x-www-form-urlencoded;
            proxy_pass_request_body on;
        }
    }

    # Private service
    server {
      listen 127.0.0.1:8003;
      return 200 "Response from a secured service";
    }

}
