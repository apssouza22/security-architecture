# Sidecar proxy configuration

load_module modules/ngx_http_js_module.so;

events {
    worker_connections  1024;
}

error_log /dev/stdout debug;
worker_processes  auto;


http {
    log_format custom '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$ssl_client_s_dn"';

    access_log /var/log/nginx/access.log custom;
    include       /etc/nginx/mime.types;

    # Custom code scripts
    js_path "/etc/nginx/njs/";

    # Increase buffer size for subrequests
    subrequest_output_buffer_size 256k;

    # Redirect all HTTP traffic to HTTPS
    server {
        listen 80 default_server;
        listen [::]:80 default_server;
        server_name serviceA.local;
        location / {
            return 301 https://$host$request_uri;
        }
    }

    server {
        listen 443 ssl;
        listen [::]:443 ssl;
        http2 on;
        ssl_session_timeout 1d;
        ssl_session_cache shared:MozSSL:10m;  # about 40000 sessions
        ssl_session_tickets off;

        # modern configuration
        ssl_protocols TLSv1.3;
        ssl_prefer_server_ciphers off;


        # Uncomment the following lines to use static SSL Certs
        ssl_certificate /etc/nginx/certs/service.crt;
        ssl_certificate_key /etc/nginx/certs/service.key;

        # the server will request a certificate from the client and verifies it against a trusted CA.
        ssl_client_certificate /etc/nginx/certs/ca.crt;
        ssl_verify_client on;
        ssl_verify_depth 2;

        location / {
            proxy_set_header        Host $host;
            proxy_set_header        X-Real-IP $remote_addr;
            proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header        X-Forwarded-Proto $scheme;

            proxy_pass http://127.0.0.1:7000;
            proxy_read_timeout  60;
            client_max_body_size 512m;
        }
    }

    js_import proxy from proxy.js;
    js_set $upstream_url proxy.getUpstreamUrl; # Define the upstream url to be proxied the request

    # Define a DNS resolver. Required for dynamic upstream url
    resolver 172.16.1.1 valid=300s;

    # A proxy to provide a ssl client certificate required for the communication with services
    server {
        listen 81 default_server;
        listen [::]:81 default_server;
        server_name proxy.local;
        location / {
            proxy_buffering off;

            proxy_set_header        Host $host;
            proxy_set_header        X-Real-IP $remote_addr;
            proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header        X-Forwarded-Proto $scheme;

            proxy_pass $upstream_url; # Since the upstream url is dynamic, we need to set dns resolver

            proxy_ssl_certificate      /etc/nginx/certs/service.crt;
            proxy_ssl_certificate_key  /etc/nginx/certs/service.key;
        }
    }

    # Private service
    server {
      listen 127.0.0.1:7000;
      return 200 "Response from a secured service";
    }
}
