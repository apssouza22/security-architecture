# Sidecar proxy configuration

load_module modules/ngx_http_js_module.so;

events {
    worker_connections  1024;
}

error_log /dev/stdout debug;
worker_processes  auto;


http {
    log_format custom '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$ssl_client_s_dn"';

    access_log /var/log/nginx/access.log custom;
    include       /etc/nginx/mime.types;

    # Custom code scripts
    js_path "/etc/nginx/njs/";
    js_import authz from authz.js;
    js_shared_dict_zone zone=kv:1m; # 1MB shared memory zone for storing certs and keys

    # Increase buffer size for subrequests
    subrequest_output_buffer_size 256k;

    # Redirect all HTTP traffic to HTTPS
    server {
        listen 80 default_server;
        listen [::]:80 default_server;
        server_name SERVICE_NAME;
        location / {
            return 301 https://$host$request_uri;
        }
    }

    server {
        listen 443 ssl;
        listen [::]:443 ssl;
        ssl_session_timeout 1d;
        ssl_session_cache shared:MozSSL:10m;  # about 40000 sessions
        ssl_session_tickets off;
        ssl_protocols TLSv1.3;
        ssl_prefer_server_ciphers off;
        http2 on;

        #---------------------------------------------------------------------- #
        # Dynamic SSL Certs. Updating certs without reloading nginx
        #---------------------------------------------------------------------- #
        js_import certs from certs.js;
        js_var $shared_dict_zone_name kv;
        js_var $cert_folder '/etc/nginx/certs/';
        js_set $dynamic_ssl_cert certs.get_cert;
        js_set $dynamic_ssl_key certs.get_cert_key;
        js_set $dynamic_ssl_ca certs.get_ca_cert;

        ssl_certificate data:$dynamic_ssl_cert;
        ssl_certificate_key data:$dynamic_ssl_key;

        # ssl certificate used for the server estabilish secure connections(HTTPS)
        # Uncomment the following lines to use static SSL Certs
        # ssl_certificate /etc/nginx/certs/service.crt;
        # ssl_certificate_key /etc/nginx/certs/service.key;

        # the server will request a certificate from the client and verifies it against a trusted CA.
        ssl_client_certificate /etc/nginx/certs/ca.crt;
        ssl_verify_client on;
        ssl_verify_depth 2;

        location / {
            auth_request /_authz;

            proxy_set_header        Host $host;
            proxy_set_header        X-Real-IP $remote_addr;
            proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header        X-Forwarded-Proto $scheme;

            proxy_pass http://127.0.0.1:7000;
            proxy_read_timeout  60;
            client_max_body_size 512m;
        }

        # Serve the endpoint to update the certs
        location /certs {
            js_content certs.handleRequest;
        }

        # Perform authorization check on the client certificate CN and Opa
        location = /_authz {
            internal;
            js_content authz.validate;
        }

        location = /_opa {
            internal;
            proxy_pass http://opa:8181/v1/data/httpapi/service_rbac;
        }

        # A proxy to Keycloak to get the public key to validate the JWT token
        location = /_keycloak_certs {
            internal;
            proxy_pass http://keycloak.local:9000/realms/tenantA/protocol/openid-connect/certs;
        }
    }

    #---------------------------------------------------------------------- #
    # Outbound proxy configuration
    #---------------------------------------------------------------------- #
    js_import proxy from proxy.js;
    js_set $upstream_url proxy.getUpstreamUrl; # Define the upstream url to be proxied the request

    # Use the local DNS resolver(/etc/resolv.conf).  Required for dynamic upstream url
    resolver 127.0.0.11 valid=5s;

    # A proxy to provide a ssl client certificate required for the communication with services
    server {
        listen 81 default_server;
        listen [::]:81 default_server;
        server_name proxy.local;
        location / {
            proxy_buffering off;

            proxy_set_header        Host $host;
            proxy_set_header        X-Real-IP $remote_addr;
            proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header        X-Forwarded-Proto $scheme;

            proxy_pass $upstream_url; # Since the upstream url is dynamic, we need to set dns resolver

            proxy_ssl_certificate         /etc/nginx/certs/service.crt;
            proxy_ssl_certificate_key     /etc/nginx/certs/service.key;
            proxy_ssl_trusted_certificate /etc/nginx/certs/ca.crt;
            proxy_ssl_verify              on
        }
    }
}
