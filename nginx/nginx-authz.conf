# Nginx configuration to authorize service to service communication

load_module modules/ngx_http_js_module.so;
error_log /dev/stdout debug;
events {
    worker_connections  1024;
}
worker_processes  1;



http {
    log_format custom '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$ssl_client_s_dn"';

    access_log /var/log/nginx/access.log custom;

    # Custom code scripts
    js_path "/etc/nginx/njs/";
    js_import authz from authz.js;
    js_import certs from certs.js;
    js_shared_dict_zone zone=kv:1m; # 1MB shared memory zone for storing certs and keys

    # Redirect all HTTP traffic to HTTPS
    server {
        listen 80 default_server;
        listen [::]:80 default_server;
        server_name SERVICE_NAME;
        location / {
            return 301 https://$host$request_uri;
        }
    }

    server {
        listen 443 ssl;
        listen [::]:443 ssl;
        http2 on;

        # Dynamic SSL Certs. Updating certs without reloading nginx
        js_var $shared_dict_zone_name kv;
        js_var $cert_folder '/etc/nginx/certs/';
        js_set $dynamic_ssl_cert certs.js_cert;
        js_set $dynamic_ssl_key certs.js_key;

        ssl_certificate data:$dynamic_ssl_cert;
        ssl_certificate_key data:$dynamic_ssl_key;

        # Uncomment the following lines to use static SSL Certs
        #ssl_certificate /etc/nginx/certs/service.crt;
        #ssl_certificate_key /etc/nginx/certs/service.key;

        # Server certificate verification
        ssl_client_certificate /etc/nginx/certs/ca.crt;
        ssl_verify_client on;
        ssl_verify_depth 2;

        # Perform authorization check on the client certificate CN. Alternative to OPA and njs
        #if ( $ssl_client_s_dn !~ "serviceB.local|serviceA.local" ){
        #    return 403;
        #}

        ssl_session_timeout 1d;
        ssl_session_cache shared:MozSSL:10m;  # about 40000 sessions
        ssl_session_tickets off;

        # modern configuration
        ssl_protocols TLSv1.3;
        ssl_prefer_server_ciphers off;

        # OCSP stapling
        ssl_stapling on;
        ssl_stapling_verify on;

        # HSTS (ngx_http_headers_module is required) (63072000 seconds)
        add_header Strict-Transport-Security "max-age=63072000" always;

        resolver 127.0.0.1;

        location / {
            auth_request /_authz;

            proxy_set_header        Host $host;
            proxy_set_header        X-Real-IP $remote_addr;
            proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header        X-Forwarded-Proto $scheme;

            proxy_pass http://127.0.0.1:8001;
            proxy_read_timeout  60;
            client_max_body_size 512m;
        }

        # Serve the certs update
        location /certs {
            js_content certs.kv;
        }

        # Perform authorization check on the client certificate CN and Opa
        location = /_authz {
            internal;
            js_content authz.validate;
        }

        location = /_opa {
            internal;
            proxy_pass http://opa:8181/v1/data/httpapi/service_rbac;
        }

    }

    server {
    # The backend server that is protected
      listen 127.0.0.1:8001;
      return 200 "WELCOME TO THE SECURED BACKEND";
    }
}
